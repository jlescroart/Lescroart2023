### Snakefile for phylogeny pipeline, with associated file config.yaml
### Load associated environment with $ conda activate phylogeny
### Author Jonas Lescroart
### To reduce DAG complexity, run with: $ for i in {1..25}; do snakemake -p --cores 10 --batch find_mcmctree=$i/25; done

### Packages
import pandas as pd
import re
from pathlib import Path

### Configuration
configfile: "config_mLynCan4.pri.v2.yaml"

### Functions
def strip_ext(file_str): 
    bits = file_str.split(".") 
    if re.match("gz", bits[-1]): 
        bits = bits[:-1] 
    if re.match("fasta|fa|fna", bits[-1]): 
        bits = bits[:-1] 
    return ".".join(bits) 

### Variables
metadata = pd.read_csv(config["metadata"], sep = "\t", engine = "python").set_index("unique_id", drop = False)
unique_id = [id for id in metadata["unique_id"].astype(str).tolist()]

unique_id.remove("mLynCan4") # Temporary skipping Lynx bc data is faulty
unique_id.remove("bLge-252")

# Working with a pruned sample set that contains only one sample per taxon
excluded_id = ["LPA-6", "LP339", "LCO-3", "LTI-32454", "LTI-6", "LTI-13", "bLge-252"]
unique_id = [id for id in unique_id if id not in excluded_id]

figure_id = [metadata.loc[id]["figure_id"] for id in unique_id]

genomic_fragments = pd.read_csv(config["input"]["filenames"], names = ["file"], engine = "python")
unique_gf = [strip_ext(gf) for gf in genomic_fragments["file"].astype(str).tolist()]

### Rules
rule all:
    input:
        "{dir}/unique_raxml_topologies_count.nwk".format(dir = config["output"]),
        #"{dir}/unique_NJ_topologies_count.nwk".format(dir = config["output"]),
        "{dir}/majority_consensus_raxml.tre".format(dir = config["output"]),
        #"{dir}/majority_consensus_NJ.tre".format(dir = config["output"]),
        "{dir}/mcct_raxml.tre".format(dir = config["output"]),
        #"{dir}/mcct_NJ.tre".format(dir = config["output"]),
        "{dir}/astral_raxml.nwk".format(dir = config["output"]),
        #"{dir}/astral_NJ.nwk".format(dir = config["output"])
        "{dir}/phyutility/leaf_stability_index_raxml.txt".format(dir = config["output"]),
        expand("{dir}/phyutility/baf_{{id}}_raxml.tre".format(dir = config["output"]), id = figure_id),
        "{dir}/greedy_consensus_mcmctree.tre".format(dir = config["output"])

rule raxml:
    input:
        maf = "{dir}/{{gf}}.fasta".format(dir = config["input"]["fragments_dir"])
    output:
        bestTree = "{dir}/raxml/RAxML_bestTree.{{gf}}".format(dir = config["output"]),
        info = "{dir}/raxml/RAxML_info.{{gf}}".format(dir = config["output"])
    threads: 2
    params:
        outdir = "{dir}/raxml".format(dir = config["output"]),
        outgroup = config["outgroup"],
        tag = "{gf}"
    shell:
        "raxmlHPC-PTHREADS -T {threads} -s {input.maf} -w {params.outdir} -m GTRGAMMA -o {params.outgroup} -n {params.tag} -p 8 && " +
        "rm {params.outdir}/RAxML_log.{params.tag} && " +
        "rm {params.outdir}/RAxML_result.{params.tag} && " +
        "rm {params.outdir}/RAxML_parsimonyTree.{params.tag}"

rule find_raxml:
    input:
        bestTree = expand("{dir}/raxml/RAxML_bestTree.{{gf}}".format(dir = config["output"]), gf = unique_gf)
    output:
        nwk = temp("{dir}/all_raxml_unique_id.nwk".format(dir = config["output"]))
    params:
        dir = "{dir}/raxml".format(dir = config["output"])
    shell:
        "find {params.dir} -type f -name 'RAxML_bestTree.*' | xargs cat > {output.nwk}"

rule unique_id2figure_id_raxml:
    input:
        nwk = "{dir}/all_raxml_unique_id.nwk".format(dir = config["output"])
    output:
        nwk = "{dir}/all_raxml.nwk".format(dir = config["output"])
    run:
        with open(output.nwk, "w") as out:
            for line in shell("cat {input.nwk}", iterable = True):
                for id in unique_id:
                    line = re.sub(id, metadata["figure_id"][id], line)
                out.write(line + "\n")

rule nw_utils_raxml1:
    input:
        nwk = "{dir}/all_raxml.nwk".format(dir = config["output"])
    output:
        nwk = "{dir}/all_raxml_topologies.nwk".format(dir = config["output"])
    shell:
        "nw_topology {input.nwk} | nw_order - | sort > {output.nwk}"

rule nw_utils_raxml2:
    input:
        nwk = "{dir}/all_raxml_topologies.nwk".format(dir = config["output"])
    output:
        nwk = "{dir}/unique_raxml_topologies_count.nwk".format(dir = config["output"])
    shell:
        "nw_topology {input.nwk} | uniq -c | sort -k1 -n > {output.nwk}"

rule sumtrees_raxml: # From DendroPy package
    input:
        nwk = "{dir}/all_raxml.nwk".format(dir = config["output"])
    output:
        tre = "{dir}/majority_consensus_raxml.tre".format(dir = config["output"])
    params:
        outgroup = metadata["figure_id"][config["outgroup"]]
    shell:
        "sumtrees.py --rooted --root-target-at-outgroup {params.outgroup} --summary-target consensus --min-clade-freq 0.0 -o {output.tre} {input.nwk}"

rule sumtrees_mcct_raxml:
    input:
        nwk = "{dir}/all_raxml.nwk".format(dir = config["output"])
    output:
        tre = "{dir}/mcct_raxml.tre".format(dir = config["output"])
    params:
        outgroup = metadata["figure_id"][config["outgroup"]]
    shell:
        "sumtrees.py --rooted --root-target-at-outgroup {params.outgroup} --summary-target mcct -o {output.tre} {input.nwk}"

rule astral_raxml:
    input:
        nwk = "{dir}/all_raxml.nwk".format(dir = config["output"])
    output:
        nwk = "{dir}/astral_raxml.nwk".format(dir = config["output"])
    params:
        outgroup = metadata["figure_id"][config["outgroup"]],
        astral = config["bin"]["astral"]
    shell:
        "java -jar {params.astral} --outgroup {params.outgroup}  -i {input.nwk} -o {output.nwk}"
# When reporting tree, use -q option of astral to see it's score, and capture stderr with 2> some_file

rule lsi:
    input:
        nwk = "{dir}/all_raxml.nwk".format(dir = config["output"])
    output:
        txt = "{dir}/phyutility/leaf_stability_index_raxml.txt".format(dir = config["output"])
    params:
        phyutility = config["bin"]["phyutility"]
    shell:
        "java -jar {params.phyutility} -ls -in {input.nwk} > {output.txt}"

rule baf:
    input:
        nwk = "{dir}/all_raxml.nwk".format(dir = config["output"]),
        tre = "{dir}/majority_consensus_raxml.tre".format(dir = config["output"])
    output:
        tre = "{dir}/phyutility/baf_{{id}}_raxml.tre".format(dir = config["output"])
    params:
        phyutility = config["bin"]["phyutility"],
        figure_id = lambda wildcards: wildcards.id
    shell:
        "java -jar {params.phyutility} -lm -in {input.nwk} -tree {input.tre} -out {output.tre} -names {params.figure_id}"

#mcmctree
rule mcmc_phy:
    input:
        maf = "{dir}/{{gf}}.fasta".format(dir = config["input"]["fragments_dir"])
    output:
        phy = temp("{dir}/phylip/{{gf}}.phy".format(dir = config["output"]))
    params:
        script = config["scripts"]["fasta2phylip"]
    shell:
        "python {params.script} --input {input.maf} --output {output.phy}"

rule mcmc_topology:
    input:
        bestTree = "{dir}/raxml/RAxML_bestTree.{{gf}}".format(dir = config["output"])
    output:
        txt = temp("{dir}/mcmc_topology/{{gf}}.txt".format(dir = config["output"]))
    shell:
        """
        nw_stats -f l {input.bestTree} | awk '{{print $3" 1"}}' > {output.txt} && nw_topology {input.bestTree} | nw_order - >> {output.txt}
        """

rule mcmc_ctl:
    input:
        phy = "{dir}/phylip/{{gf}}.phy".format(dir = config["output"]),
        txt = "{dir}/mcmc_topology/{{gf}}.txt".format(dir = config["output"])
    output:
        ctl = temp("{dir}/mcmctree/{{gf}}.ctl".format(dir = config["output"]))
    params:
        script = config["scripts"]["generate_ctlMCMC"]
    shell:
        "python {params.script} --phy {input.phy} --nwk {input.txt} --ctl {output.ctl}"

rule mcmctree: #might be optimized with a snakemake shadow directory
    input:
        ctl = "{dir}/mcmctree/{{gf}}.ctl".format(dir = config["output"]),
        phy = "{dir}/phylip/{{gf}}.phy".format(dir = config["output"]),
        txt = "{dir}/mcmc_topology/{{gf}}.txt".format(dir = config["output"])
    output:
        tre = temp("{dir}/mcmctree/{{gf}}.tre".format(dir = config["output"])),
        out = temp("{dir}/mcmctree/{{gf}}_out.txt".format(dir = config["output"])),
        mcmc = temp("{dir}/mcmctree/{{gf}}_mcmc.txt".format(dir = config["output"]))
    params:
        dir = "{dir}/mcmctree/{{gf}}".format(dir = config["output"]),
        ctl = config["output"] + "/mcmctree/" + ("HHHH").join("{gf}".split(":")) + ".ctl"
    run:
        controlfile = input.ctl.split("/")[-1]
        controlfile = ("\:").join(controlfile.split(":"))
        shell("mkdir -p {params.dir} && cd {params.dir} && mcmctree ../"+controlfile+" && mv FigTree.tre {output.tre} && cd .. && rm -r {params.dir}")

rule nexus:
    input:
        tre = "{dir}/mcmctree/{{gf}}.tre".format(dir = config["output"])
    output:
        nex = "{dir}/mcmctree/{{gf}}.nex".format(dir = config["output"])
    shell:
        "sed 's/UTREE/TREE/g' {input.tre} > {output.nex}"

rule find_mcmctree:
    input:
        nex = expand("{dir}/mcmctree/{{gf}}.nex".format(dir = config["output"]), gf = unique_gf)
    output:
        nex = temp("{dir}/all_mcmctree_unique_id.nex".format(dir = config["output"]))
    params:
        dir = "{dir}/mcmctree".format(dir = config["output"])
    shell:
        "find {params.dir} -type f -name '*.nex' | xargs cat > {output.nex}"

rule unique_id2figure_id_mcmctree:
    input:
        nex = "{dir}/all_mcmctree_unique_id.nex".format(dir = config["output"])
    output:
        nex = "{dir}/all_mcmctree.nex".format(dir = config["output"])
    run:
        with open(output.nex, "w") as out:
            for line in shell("cat {input.nex}", iterable = True):
                for id in unique_id:
                    line = re.sub(id, metadata["figure_id"][id], line)
                out.write(line + "\n")

rule sumtrees_mcmctree:
    input:
        nex = "{dir}/all_mcmctree.nex".format(dir = config["output"])
    output:
        tre = "{dir}/greedy_consensus_mcmctree.tre".format(dir = config["output"])
    params:
        outgroup = metadata["figure_id"][config["outgroup"]]
    shell:
        "sumtrees.py -i nexus --root-target-at-outgroup {params.outgroup} --min-clade-freq=0.0 --summarize-node-ages --set-edges=mean-age -o {output.tre} {input.nex}"


#neighorjoing: produces very bad results, use results NJ results from diversity pipeline instead
rule muscle:
    input:
        maf = "{dir}/{{gf}}.fasta".format(dir = config["input"]["fragments_dir"])
    output:
        nwk = temp("{dir}/muscle/{{gf}}.tmp.nwk".format(dir = config["output"]))
    shell:
        "muscle -maketree -in {input.maf} -out {output.nwk} -cluster neighborjoining"

rule nw_utils_muscle1:
    input:
        nwk = "{dir}/muscle/{{gf}}.tmp.nwk".format(dir = config["output"])
    output:
        nwk = "{dir}/muscle/{{gf}}.nwk".format(dir = config["output"])
    shell:
        "nw_order {input.nwk} > {output.nwk}"

rule cat_muscle:
    input:
        nwk = expand("{dir}/muscle/{{gf}}.nwk".format(dir = config["output"]), gf = unique_gf)
    output:
        nwk = temp("{dir}/all_NJ_unique_id.nwk".format(dir = config["output"]))
    params:
        dir = "{dir}/muscle".format(dir = config["output"])
    shell:
        "find {params.dir} -type f -name '*.nwk' | xargs cat > {output.nwk}"

use rule unique_id2figure_id_raxml as unique_id2figure_id_muscle with:
    input:
        nwk = "{dir}/all_NJ_unique_id.nwk".format(dir = config["output"])
    output:
        nwk = "{dir}/all_NJ.nwk".format(dir = config["output"])

rule nw_utils_muscle2:
    input:
        nwk = "{dir}/all_NJ.nwk".format(dir = config["output"])
    output:
        nwk = "{dir}/all_NJ_topologies.nwk".format(dir = config["output"])
    shell:
        "nw_topology {input.nwk} | nw_order - | sort > {output.nwk}"

rule nw_utils_muscle3:
    input:
        nwk = "{dir}/all_NJ_topologies.nwk".format(dir = config["output"])
    output:
        nwk = "{dir}/unique_NJ_topologies_count.nwk".format(dir = config["output"])
    shell:
        "nw_topology {input.nwk} | uniq -c | sort -k1 -n > {output.nwk}"

use rule sumtrees_raxml as sumtrees_muscle with:
    input:
        nwk = "{dir}/all_NJ.nwk".format(dir = config["output"])
    output:
        tre = "{dir}/majority_consensus_NJ.tre".format(dir = config["output"])

use rule sumtrees_mcct_raxml as sumtrees_mcct_muscle with:
    input:
        nwk = "{dir}/all_NJ.nwk".format(dir = config["output"])
    output:
        tre = "{dir}/mcct_NJ.tre".format(dir = config["output"])

use rule astral_raxml as astral_muscle with:
    input:
        nwk = "{dir}/all_NJ.nwk".format(dir = config["output"])
    output:
        nwk = "{dir}/astral_NJ.nwk".format(dir = config["output"])

### pieces of code from other Snakefile that I might need here
rule filenames:
    input:
        csv = expand("{dir}/pairwise_pi/fragments/{{gf}}.csv".format(dir = config["output"]), gf = unique_gf)
    output:
        txt = "{dir}/pairwise_pi/filenames.txt".format(dir = config["output"])
    params:
        dir = "{dir}/pairwise_pi/fragments/".format(dir = config["output"])
    shell:
        "find {params.dir} -type f > {output.txt}"

rule pairwise_pi_plot:
    input:
        csv = expand("{dir}/pairwise_pi/fragments/{{gf}}.csv".format(dir = config["output"]), gf = unique_gf),
        txt = "{dir}/pairwise_pi/filenames.txt".format(dir = config["output"])
    output:
        csv = "{dir}/pairwise_pi/average_pairwise_pi.csv".format(dir = config["output"])
    shell:
        "python3 {params.script} --list {input.txt} --output {output.csv}"

