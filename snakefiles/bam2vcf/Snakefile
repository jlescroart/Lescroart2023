### Snakefile for bam2vcf pipeline, with associated file config.yaml
### Producement of vcf from BAM
### Load associated environment with $ conda activate bam2vcf
### Author Jonas Lescroart
### snakemake -p --cores 17
### bcftools can only use one core per process, so ideally use one core per sample

### Packages
import pandas as pd
import re
from pathlib import Path

### Configuration
configfile: "config_Lge-1.yaml"

### Functions
def strip_ext(file_str): 
    bits = file_str.split(".") 
    if re.match("gz", bits[-1]): 
        bits = bits[:-1] 
    if re.match("fasta|fa|fna", bits[-1]): 
        bits = bits[:-1] 
    return ".".join(bits) 

### Variables
metadata = pd.read_csv(config["metadata"], sep = "\t", engine = "python", encoding="latin-1").set_index("unique_id", drop = False)

unique_id = [id for id in metadata["unique_id"].astype(str).tolist()]
for id in config["exclude"]:
    unique_id.remove(id)

unique_chr = []
ref_fai = pd.read_csv("{ref}.fna.fai".format(ref = strip_ext(config["ref"]["file"])), sep = "\t", engine = "python", names = ["chromosome", "2", "3", "4", "5"]).set_index("chromosome", drop = False)
for chr in ref_fai["chromosome"]:
    if config["ref"]["chromosome_tag"] in chr:
        unique_chr.append(chr)
if config["ref"]["MT"] in unique_chr:
    unique_chr.remove(config["ref"]["MT"])
autosomes = unique_chr.copy()
for chr in config["ref"]["sex_chr"]:
    if chr in autosomes:
        autosomes.remove(chr)
del chr

#for testing

### Rules
rule all:
    input:
        #"{dir}/bam_list.txt".format(dir = config["output"]["vcf"]),
        #"{dir}/all.{ref}.bcf".format(dir = config["output"]["vcf"], ref = config["ref"]["assembly"]),
        #"{dir}/total_depth.txt".format(dir = config["output"]["vcf"])
        #expand("{dir}/{{chr}}.vcf.gz".format(dir = config["output"]["vcf"]), chr = unique_chr),
        "{dir}/leopardus_unmasked.html".format(dir = config["output"]["vcf"]),
        "{dir}/leopardus_autosomal.html".format(dir = config["output"]["vcf"]),
        "{dir}/leopardus_repeatmasked.html".format(dir = config["output"]["vcf"]),
        "{dir}/plink2/leopardus_pca.svg".format(dir = config["output"]["vcf"])

rule ref_gunzip:
    input:
        ref_gz = config["ref"]["file"]
    output:
        ref_fna = "{ref}.fna".format(ref = strip_ext(config["ref"]["file"]))
    shell:
        "gunzip -k {input.ref_gz}"

rule rmsk_gunzip:
    input:
        gz = config["ref"]["repeatmasker_out"]
    output:
        rmsk = temp(strip_ext(config["ref"]["repeatmasker_out"]))
    shell:
        "gunzip -c {input.gz} > {output.rmsk}"

rule rmsk2bed:
    input:
        rmsk = strip_ext(config["ref"]["repeatmasker_out"])
    output:
        bed = strip_ext(config["ref"]["repeatmasker_out"]) + ".bed"
    shell:
        "rmsk2bed < {input.rmsk} | bedops --merge - > {output.bed}"

rule gatk:
    input:
        ref_fna = "{ref}.fna".format(ref = strip_ext(config["ref"]["file"]))
    output:
        dict = "{ref}.dict".format(ref = strip_ext(config["ref"]["file"]))
    shell:
        "gatk CreateSequenceDictionary -R {input.ref_fna} -O {output.dict}"

rule bcftools_mpileup:
    input:
        bam = expand("{dir}/{{id}}.filtered.bam".format(dir = config["input"]["bam"]), id = unique_id),
        ref_fna = "{ref}.fna".format(ref = strip_ext(config["ref"]["file"]))
    output:
        vcf = temp("{dir}/{{chr}}.vcf.gz".format(dir = config["output"]["vcf"]))
    params:
        chr = "{chr}"
    shell:
        "bcftools mpileup -r {params.chr} --skip-indels --min-MQ 30 --min-BQ 20 -a FORMAT/DP -d 100 -Ou -f {input.ref_fna} {input.bam} | bcftools call -m --variants-only -Ou | bcftools annotate -x FORMAT/PL,^INFO/MQ -Ou | bcftools filter -e 'FORMAT/DP>40' -Ou | bcftools filter -e 'FORMAT/DP<5' -Oz -o {output.vcf}"
# Instead of filtering during mpileup, annotate eg INFO/INDEL and then filter with INFO/INDEL=1 using --soft-filter. Then all excluded sites are visible in VariantQC report, and can be excluded in analyses with the PASS filter tag.
# Can't find a way to adjust min- and max-depth to sample- and chr specific value, like I did in bam2fasta
# bcftools filter can use --set-GTs . to set only failed samples to missing (.) rather than discarding the whole site across all samples

rule indexfeaturefile:
    input:
        vcf = "{dir}/{{chr}}.vcf.gz".format(dir = config["output"]["vcf"])
    output:
        tbi = temp("{dir}/{{chr}}.vcf.gz.tbi".format(dir = config["output"]["vcf"]))
    shell:
        "gatk IndexFeatureFile --input {input.vcf} --output {output.tbi}"

rule unique_id2figure_id:
    input:
        bam = expand("{dir}/{{id}}.filtered.bam".format(dir = config["input"]["bam"]), id = unique_id)
    output:
        tsv = temp("{dir}/unique_id2figure_id.tsv".format(dir = config["output"]["vcf"]))
    run:
        with open(output.tsv, "w") as out:
            for id in unique_id:
                new_id = metadata.loc[id]["figure_id"]
                out.write(config["input"]["bam"] + "/"  + id + ".filtered.bam\t" + new_id + "\n")

rule reheader_fai:
    input:
        fai = "{ref}.fna.fai".format(ref = strip_ext(config["ref"]["file"]))
    output:
        fai = temp("{dir}/reheader.fai".format(dir = config["output"]["vcf"]))
    run:
        outlines = []
        with open(input.fai, "r") as infile:
            inlines = infile.readlines()
        for line in inlines:
            for chr in autosomes:
                if chr in line:
                    outlines.append(line)
            del chr
        with open(output.fai, "w") as out:
            out.writelines(outlines)

rule bcftools_concat:
    input:
        vcf = expand("{dir}/{{chr}}.vcf.gz".format(dir = config["output"]["vcf"]), chr = unique_chr),
        tbi = expand("{dir}/{{chr}}.vcf.gz.tbi".format(dir = config["output"]["vcf"]), chr = unique_chr),
        fai = "{dir}/reheader.fai".format(dir = config["output"]["vcf"]),
        tsv = "{dir}/unique_id2figure_id.tsv".format(dir = config["output"]["vcf"])
    output:
        vcf = "{dir}/leopardus_unmasked.vcf.gz".format(dir = config["output"]["vcf"])
    threads: 6
    shell:
        "bcftools concat --threads {threads} -Oz {input.vcf} | bcftools reheader -s {input.tsv} -o temp.vcf.gz && bcftools reheader --fai {input.fai} -o {output.vcf} temp.vcf.gz"

use rule indexfeaturefile as indexfeaturefile_unmasked with:
    input:
        vcf = "{dir}/leopardus_unmasked.vcf.gz".format(dir = config["output"]["vcf"])
    output:
        tbi = "{dir}/leopardus_unmasked.vcf.gz.tbi".format(dir = config["output"]["vcf"])

rule bcftools_mask:
    input:
        vcf = "{dir}/leopardus_unmasked.vcf.gz".format(dir = config["output"]["vcf"]),
        tbi = "{dir}/leopardus_unmasked.vcf.gz.tbi".format(dir = config["output"]["vcf"]),
        bed = strip_ext(config["ref"]["repeatmasker_out"]) + ".bed"
    output:
        vcf = "{dir}/leopardus_repeatmasked.vcf.gz".format(dir = config["output"]["vcf"])
    threads: 6
    shell:
        "bcftools filter --threads {threads} -T ^{input.bed} -Oz -o {output.vcf} {input.vcf}"
# Should be using bcftools filter --mask-file {input.bed} --soft-filter MASK -m +
# But I'm stuck with bcftools <v1.15 in conda for now

use rule indexfeaturefile as indexfeaturefile_masked with:
    input:
        vcf = "{dir}/leopardus_repeatmasked.vcf.gz".format(dir = config["output"]["vcf"])
    output:
        tbi = "{dir}/leopardus_repeatmasked.vcf.gz.tbi".format(dir = config["output"]["vcf"])

rule bcftools_autosomal:
    input:
        vcf = "{dir}/leopardus_unmasked.vcf.gz".format(dir = config["output"]["vcf"]),
        tbi = "{dir}/leopardus_unmasked.vcf.gz.tbi".format(dir = config["output"]["vcf"])
    output:
        vcf = "{dir}/leopardus_autosomal.vcf.gz".format(dir = config["output"]["vcf"])
    threads: 6
    params:
        chr = ','.join(autosomes)
    shell:
        "bcftools filter --threads {threads} --regions {params.chr} -Oz -o {output.vcf} {input.vcf}"

use rule indexfeaturefile as indexfeaturefile_autosomal with:
    input:
        vcf = "{dir}/leopardus_autosomal.vcf.gz".format(dir = config["output"]["vcf"])
    output:
        tbi = "{dir}/leopardus_autosomal.vcf.gz.tbi".format(dir = config["output"]["vcf"])

rule variantqc:
    input:
        vcf = "{dir}/leopardus_unmasked.vcf.gz".format(dir = config["output"]["vcf"]),
        tbi = "{dir}/leopardus_unmasked.vcf.gz.tbi".format(dir = config["output"]["vcf"]),
        ref_fna = "{ref}.fna".format(ref = strip_ext(config["ref"]["file"])),
        dict = "{ref}.dict".format(ref = strip_ext(config["ref"]["file"]))
    output:
        html = "{dir}/leopardus_unmasked.html".format(dir = config["output"]["vcf"])
    threads: 4
    params:
        jar = config["bin"]["variantqc"]
    shell:
        "java -jar {params.jar} VariantQC --threads {threads} -R {input.ref_fna} -V {input.vcf} -O {output.html}"

use rule variantqc as variantqc_masked with:
    input:
        vcf = "{dir}/leopardus_repeatmasked.vcf.gz".format(dir = config["output"]["vcf"]),
        tbi = "{dir}/leopardus_repeatmasked.vcf.gz.tbi".format(dir = config["output"]["vcf"]),
        ref_fna = "{ref}.fna".format(ref = strip_ext(config["ref"]["file"])),
        dict = "{ref}.dict".format(ref = strip_ext(config["ref"]["file"]))
    output:
        html = "{dir}/leopardus_repeatmasked.html".format(dir = config["output"]["vcf"])

use rule variantqc as variantqc_autosomal with:
    input:
        vcf = "{dir}/leopardus_autosomal.vcf.gz".format(dir = config["output"]["vcf"]),
        tbi = "{dir}/leopardus_autosomal.vcf.gz.tbi".format(dir = config["output"]["vcf"]),
        ref_fna = "{ref}.fna".format(ref = strip_ext(config["ref"]["file"])),
        dict = "{ref}.dict".format(ref = strip_ext(config["ref"]["file"]))
    output:
        html = "{dir}/leopardus_autosomal.html".format(dir = config["output"]["vcf"])

rule keepfile:
    input:
        tbi = "{dir}/leopardus_repeatmasked.vcf.gz.tbi".format(dir = config["output"]["vcf"])
    output:
        tsv = "{dir}/plink2/keep.tsv".format(dir = config["output"]["vcf"])
    params:
        path = "{dir}/plink2".format(dir = config["output"]["vcf"]),
        outgroup = config["outgroup"]
    run:
        shell("mkdir -p {params.path}")
        include_id = unique_id
        for id in params.outgroup:
            include_id.remove(id)
        with open(output.tsv, "w") as out:
            out.write("#FID\tIID\n")
            for id in include_id:
                out.write(metadata.loc[id]["figure_id"] + "\t" + metadata.loc[id]["figure_id"] + "\n")

rule plink2_indep:
    input:
        vcf = "{dir}/leopardus_repeatmasked.vcf.gz".format(dir = config["output"]["vcf"]),
        tsv = "{dir}/plink2/keep.tsv".format(dir = config["output"]["vcf"])
    output:
        prune_in = temp("{dir}/plink2/leopardus.prune.in".format(dir = config["output"]["vcf"])),
        prune_out = temp("{dir}/plink2/leopardus.prune.out".format(dir = config["output"]["vcf"])),
        log = "{dir}/plink2/leopardus.log".format(dir = config["output"]["vcf"])
    threads: 4
    params:
        prefix = "{dir}/plink2/leopardus".format(dir = config["output"]["vcf"])
    shell:
        "plink2 --vcf {input.vcf} --threads {threads} --memory 16000 --double-id --allow-extra-chr --set-missing-var-ids @:# --keep {input.tsv} --maf 0.05 --indep-pairwise 50 10 0.1 --out {params.prefix}"

rule plink2_afreq:
    input:
        vcf = "{dir}/leopardus_repeatmasked.vcf.gz".format(dir = config["output"]["vcf"]),
        tsv = "{dir}/plink2/keep.tsv".format(dir = config["output"]["vcf"])
    output:
        afreq = temp("{dir}/plink2/leopardus.afreq".format(dir = config["output"]["vcf"]))
    threads: 4
    params:
        prefix = "{dir}/plink2/leopardus".format(dir = config["output"]["vcf"])
    shell:
        "plink2 --vcf {input.vcf} --threads {threads} --memory 16000 --double-id --allow-extra-chr --set-missing-var-ids @:# --keep {input.tsv} --freq --out {params.prefix}"

rule plink2_pca:
    input:
        vcf = "{dir}/leopardus_repeatmasked.vcf.gz".format(dir = config["output"]["vcf"]),
        prune_in = "{dir}/plink2/leopardus.prune.in".format(dir = config["output"]["vcf"]),
        afreq = "{dir}/plink2/leopardus.afreq".format(dir = config["output"]["vcf"]),
        tsv = "{dir}/plink2/keep.tsv".format(dir = config["output"]["vcf"])
    output:
        eigenvec = "{dir}/plink2/leopardus.eigenvec".format(dir = config["output"]["vcf"]),
        eigenval = "{dir}/plink2/leopardus.eigenval".format(dir = config["output"]["vcf"])
    threads: 4
    params:
        prefix = "{dir}/plink2/leopardus".format(dir = config["output"]["vcf"])
    shell:
        "plink2 --vcf {input.vcf} --threads {threads} --memory 16000 --double-id --allow-extra-chr --set-missing-var-ids @:# --keep {input.tsv} --read-freq {input.afreq} --extract {input.prune_in} --pca --out {params.prefix}"

rule plot_plink_pca:
    input:
        eigenvec = "{dir}/plink2/leopardus.eigenvec".format(dir = config["output"]["vcf"]),
        eigenval = "{dir}/plink2/leopardus.eigenval".format(dir = config["output"]["vcf"])
    output:
        svg = "{dir}/plink2/leopardus_pca.svg".format(dir = config["output"]["vcf"])
    params:
        script = config["scripts"]["plot_plink_pca"]
    shell:
        "python {params.script} --vec {input.eigenvec} --val {input.eigenval} --output {output.svg}"
